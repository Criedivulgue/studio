rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSuperAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || 
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin');
    }

    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /public_config/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    match /public_profiles/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /tags/{tagId} {
      allow read, write: if isAdmin() && resource.data.ownerId == request.auth.uid;
      allow create: if isAdmin() && request.resource.data.ownerId == request.auth.uid;
    }
    
    match /contacts/{contactId} {
      allow read, write: if isAdmin() && resource.data.ownerId == request.auth.uid;
      allow create: if isAdmin() && request.resource.data.ownerId == request.auth.uid;
    }
    
    match /chatSessions/{sessionId} {

      function isSessionAdmin() {
        return isAdmin() && resource.data.adminId == request.auth.uid;
      }

      function isSessionVisitor() {
        return isAuthenticated() && resource.data.visitorUid == request.auth.uid;
      }

      // LEITURA: Permitida para o admin OU o visitante da sessão (usa resource).
      allow read: if isSessionAdmin() || isSessionVisitor();

      // CRIAÇÃO: Permitida se o usuário autenticado for o visitante (usa request.resource).
      allow create: if isAuthenticated() && 
                       request.resource.data.visitorUid == request.auth.uid &&
                       request.resource.data.adminId != null;

      // ATUALIZAÇÃO/EXCLUSÃO: Apenas para o admin da sessão.
      allow update, delete: if isSessionAdmin();
      
      match /messages/{messageId} {
        
        function isAllowedInSession(){
           let session = get(/databases/$(database)/documents/chatSessions/$(sessionId));
           return session.data.adminId == request.auth.uid || session.data.visitorUid == request.auth.uid;
        }

        allow read, create: if isAuthenticated() && isAllowedInSession();
        
        allow update, delete: if isAdmin() && get(/databases/$(database)/documents/chatSessions/$(sessionId)).data.adminId == request.auth.uid;
      }
    }
    
    match /ai_configs/{configId} {
      allow read, write: if isAdmin() && resource.data.adminId == request.auth.uid;
    }
    
    match /system_settings/{documentId} {
      allow read: if isAdmin();
      allow write: if isSuperAdmin();
    }
    
    match /notifications/{notificationId} {
      allow read, write: if isAdmin() && resource.data.adminId == request.auth.uid;
    }
  }
}