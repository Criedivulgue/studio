rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSuperAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    function isAuthenticatedUser() {
      return request.auth != null;
    }

    function isSessionParticipant(sessionData) {
      return request.auth != null && 
             (request.auth.uid == sessionData.visitorUid || 
              request.auth.uid == sessionData.adminId);
    }

    match /users/{userId} {
      allow read, list: if isSuperAdmin();
      allow get, update: if request.auth.uid == userId;
    }

    match /public_profiles/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }

    match /public_config/{documentId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    match /contacts/{contactId} {
      allow read, write: if isSuperAdmin();
      allow create: if isAdmin() && request.resource.data.ownerId == request.auth.uid;
      allow get, update, delete: if isAdmin() && resource.data.ownerId == request.auth.uid;
      allow list: if isAdmin();
    }

    match /tags/{tagId} {
      allow read, write: if isSuperAdmin();
      allow create: if isAdmin() && request.resource.data.ownerId == request.auth.uid;
      allow get, update, delete: if isAdmin() && resource.data.ownerId == request.auth.uid;
      allow list: if isAdmin();
    }

    match /conversations/{conversationId} {
      allow read, write: if isSuperAdmin();
      allow create: if isAdmin() && request.resource.data.adminId == request.auth.uid;
      allow get, update, delete: if isAdmin() && resource.data.adminId == request.auth.uid;
      allow list: if isAdmin();

      match /messages/{messageId} {
        allow read, write: if isSuperAdmin() || (isAdmin() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.adminId == request.auth.uid);
      }
    }
    
    match /ai_configs/{configId} {
      allow read, write: if isSuperAdmin();
      allow get, list: if isAdmin();
      allow create: if isAdmin() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isAdmin() && resource.data.ownerId == request.auth.uid;
    }

    // --- REGRAS CORRIGIDAS PARA CHAT SESSIONS ---
    match /chatSessions/{sessionId} {
      // PERMITE CRIAÇÃO por qualquer usuário autenticado (incluindo anônimos)
      // Verifica se o visitorUid é o mesmo do usuário autenticado
      allow create: if isAuthenticatedUser() && 
                     request.resource.data.visitorUid == request.auth.uid;

      // PERMITE LEITURA pelo visitante ou pelo admin da sessão
      allow get: if isAuthenticatedUser() && 
                  (request.auth.uid == resource.data.visitorUid || 
                   request.auth.uid == resource.data.adminId);
      
      // PERMITE LISTAGEM apenas por administradores (não por anônimos)
      allow list: if isAdmin();
      
      // PERMITE ATUALIZAÇÃO apenas pelo admin da sessão
      allow update, delete: if isAuthenticatedUser() && 
                             request.auth.uid == resource.data.adminId;

      // SUBColeção de mensagens
      match /messages/{messageId} {
        
        // Função auxiliar para obter dados da sessão pai
        function getSessionData() {
          return get(/databases/$(database)/documents/chatSessions/$(sessionId)).data;
        }
        
        // PERMITE CRIAÇÃO de mensagens pelo visitante ou pelo admin
        allow create: if isAuthenticatedUser() && 
                       (request.auth.uid == getSessionData().visitorUid ||
                        request.auth.uid == getSessionData().adminId);
        
        // PERMITE LEITURA de mensagens pelo visitante ou pelo admin
        allow read: if isAuthenticatedUser() && 
                     (request.auth.uid == getSessionData().visitorUid ||
                      request.auth.uid == getSessionData().adminId);
        
        // PERMITE LISTAGEM de mensagens pelo visitante ou pelo admin
        allow list: if isAuthenticatedUser() && 
                     (request.auth.uid == getSessionData().visitorUid ||
                      request.auth.uid == getSessionData().adminId);
      }
    }

    match /system_settings/{documentId} {
      allow read: if isAdmin() || isSuperAdmin();
      allow write: if isSuperAdmin();
    }
    
    match /notifications/{notificationId} {
      allow read, write: if isSuperAdmin() || isAdmin();
      allow list: if isSuperAdmin() || isAdmin();
    }
  }
}